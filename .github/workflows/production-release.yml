name: tpd

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  set_version:
    runs-on: ubuntu-latest
    steps:
      - name: "Example output creation"
        id: "get_release_version"
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/*/}
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
    outputs:
      RELEASE_VERSION: ${{steps.get_release_version.outputs.RELEASE_VERSION}}

  build:
    runs-on: ubuntu-latest
    needs: [set_version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Login to GitHub Packages
        run: |
          RELEASE_VERSION=${{needs.set_version.outputs.RELEASE_VERSION}}
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username ${{ secrets.USERNAME }} --password-stdin

          if ! docker pull ghcr.io/${{ secrets.USERNAME }}/composer_runner:$RELEASE_VERSION 2>/dev/null; then
            docker build -f ./prod/dockerfiles/composer_runner.Dockerfile -t ghcr.io/${{ secrets.USERNAME }}/composer_runner:$RELEASE_VERSION .
          fi

          if ! docker pull ghcr.io/${{ secrets.USERNAME }}/npm_runner:$RELEASE_VERSION 2>/dev/null; then
            docker build -f ./prod/dockerfiles/npm_runner.Dockerfile -t ghcr.io/${{ secrets.USERNAME }}/npm_runner:$RELEASE_VERSION .
          fi

          if ! docker pull ghcr.io/${{ secrets.USERNAME }}/${{ secrets.APP_NAME }}:$RELEASE_VERSION 2>/dev/null; then
            docker build --build-arg USERNAME=${{ secrets.USERNAME }} --build-arg RELEASE_VERSION=$RELEASE_VERSION -f ./prod/dockerfiles/app.Dockerfile -t ghcr.io/${{ secrets.USERNAME }}/${{ secrets.APP_NAME }}:$RELEASE_VERSION .
          fi
          if ! docker pull ghcr.io/${{ secrets.USERNAME }}/proxy:$RELEASE_VERSION 2>/dev/null; then
            docker build -f ./prod/dockerfiles/static.Dockerfile -t ghcr.io/${{ secrets.USERNAME }}/proxy:$RELEASE_VERSION .
          fi

          docker push ghcr.io/${{ secrets.USERNAME }}/${{ secrets.APP_NAME }}:$RELEASE_VERSION
          docker push ghcr.io/${{ secrets.USERNAME }}/proxy:$RELEASE_VERSION

  deploy:
    runs-on: ubuntu-latest
    needs: [build, set_version]
    steps:
      - name: Login to Droplet
        run: |
          RELEASE_VERSION=${{needs.set_version.outputs.RELEASE_VERSION}}
          sudo apt-get update --quiet
          sudo apt-get install openssh-client -y
          sudo apt-get install make -y
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "\
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username ${{ secrets.USERNAME }} --password-stdin \
          && cd ${{ secrets.PROJECT_FOLDER_PATH }} \
          && docker pull ghcr.io/${{ secrets.USERNAME }}/${{ secrets.APP_NAME }}:$RELEASE_VERSION \
          && docker pull ghcr.io/${{ secrets.USERNAME }}/proxy:$RELEASE_VERSION \
          && VERSION=$RELEASE_VERSION docker compose -f docker-compose-prod.yml up -d --build --remove-orphans \
          && docker logout \
          && docker system prune -af"

  run-migrations:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Run Database Migrations
        run: |
          sudo apt-get update --quiet
          sudo apt-get install openssh-client -y
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "\
          cd tpd \
          && sudo apt-get install --only-upgrade make
          && docker exec -t ${{ secrets.APP_NAME }} sh -c 'make migrate'"
